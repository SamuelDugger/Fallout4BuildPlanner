/* Fallout 4 Character Builder JS Copywrite Ken Fitts 2015 */ var character = {
  strength: 1,
  perception: 1,
  endurance: 1,
  charisma: 1,
  intelligence: 1,
  agility: 1,
  luck: 1,
  points: 29,
  perkArray: [],
  level: [],
};
var perks = {
  strength: [
    { name: "Iron Fists", levels: [2, 9, 18, 31, 46], tldr: "Unarmed damage" },
    {
      name: "Big Leagues",
      levels: [2, 7, 15, 27, 42],
      tldr: "Melee Weapons damage",
    },
    { name: "Armorer", levels: [2, 13, 25, 39], tldr: "Armor mods" },
    { name: "Blacksmith", levels: [2, 16, 29], tldr: "Melee Weapon mods" },
    {
      name: "Heavy Gunner",
      levels: [2, 11, 21, 35, 47],
      tldr: "Heavy Gun damage",
    },
    { name: "Strong Back", levels: [2, 10, 20, 30], tldr: "Carry Weight" },
    { name: "Steady Aim", levels: [2, 28], tldr: "Hip-fire accuracy" },
    { name: "Basher", levels: [2, 5, 14, 26], tldr: "Gun Bash damage" },
    { name: "Rooted", levels: [2, 22, 43], tldr: "Melee bonus for not moving" },
    {
      name: "Pain Train",
      levels: [2, 24, 50],
      tldr: "Power Armor sprint attack",
    },
  ],
  perception: [
    { name: "Pickpocket", levels: [2, 6, 17, 30], tldr: "Pickpocket bonus" },
    {
      name: "Rifleman",
      levels: [2, 9, 18, 31, 46],
      tldr: "Non-Automatic Rifle damage",
    },
    { name: "Awareness", levels: [2], tldr: "See enemy weaknesses" },
    {
      name: "Locksmith",
      levels: [2, 7, 18, 41],
      tldr: "Lockpicking accessibility",
    },
    {
      name: "Demolition Expert",
      levels: [2, 10, 22, 34],
      tldr: "Craft | Explosive damage",
    },
    {
      name: "Night Person",
      levels: [2, 25],
      tldr: "Int / Per bonus during hrs: 1800 - 0600 ",
    },
    {
      name: "Refractor",
      levels: [2, 11, 21, 35, 42],
      tldr: "Energy resistance",
    },
    { name: "Sniper", levels: [2, 13, 26], tldr: "Scoped effectiveness" },
    {
      name: "Penetrator",
      levels: [2, 28],
      tldr: "Ignore enemy cover in V.A.T.S",
    },
    {
      name: "Concentrated Fire",
      levels: [2, 26, 50],
      tldr: "Accuracy / Damage bonus on same body part in V.A.T.S",
    },
  ],
  endurance: [
    {
      name: "Toughness",
      levels: [2, 9, 18, 31, 46],
      tldr: "Physical Damage resistance",
    },
    {
      name: "Lead Belly",
      levels: [2, 6, 17],
      tldr: "Less Rads from eating and drinking",
    },
    {
      name: "Life Giver",
      levels: [2, 8, 20],
      tldr: "Health bonus | Health regen",
    },
    {
      name: "Chem Resistant",
      levels: [2, 22],
      tldr: "Chem addiction chance reduction",
    },
    {
      name: "Aquaboy",
      levels: [2, 21],
      tldr: "No rads from swimming | breathe | stealth under water",
    },
    {
      name: "Rad Resistant",
      levels: [2, 13, 26],
      tldr: "Radiation resistance",
    },
    {
      name: "Adamantium Skeleton",
      levels: [2, 13, 26],
      tldr: "Limb damage reduction",
    },
    {
      name: "Cannibal",
      levels: [2, 19, 38],
      tldr: "Eat corpses to restore health",
    },
    {
      name: "Ghoulish",
      levels: [2, 24, 48],
      tldr: "Radiation regenerates health",
    },
    {
      name: "Solar Powered",
      levels: [2, 27, 50],
      tldr: "Str / End bonus during hrs: 0600-1800 | Sun regens health",
    },
  ],
  charisma: [
    { name: "Cap Collector", levels: [2, 20, 41], tldr: "Better prices" },
    {
      name: "Lady Killer",
      levels: [2, 7, 22],
      tldr: "Opposite Gender increased damage and influence",
    },
    {
      name: "Lone Wanderer",
      levels: [2, 17, 40],
      tldr: "Bonuses without companion",
    },
    {
      name: "Attack Dog",
      levels: [2, 9, 25],
      tldr: "Dog can hold, cripple and bleed enemies",
    },
    { name: "Animal Friend", levels: [2, 12, 28], tldr: "Pacify enemies" },
    {
      name: "Local Leader",
      levels: [2, 14],
      tldr: "Connect and improve settlements",
    },
    { name: "Party Boy", levels: [2, 15, 37], tldr: "Alchohol is your friend" },
    { name: "Inspirational", levels: [2, 19, 43], tldr: "Companion enhanced" },
    {
      name: "Wasteland Whisperer",
      levels: [2, 21, 49],
      tldr: "Pacify creatures",
    },
    { name: "Intimidation", levels: [2, 23, 50], tldr: "Pacify humans" },
  ],
  intelligence: [
    { name: "V.A.N.S.", levels: [2], tldr: "Improve Pip-Boy map notes" },
    {
      name: "Medic",
      levels: [2, 18, 30, 49],
      tldr: "Stimpaks and Radaway more effective",
    },
    { name: "Gun Nut", levels: [2, 13, 25, 39], tldr: "Gun Mods" },
    { name: "Hacker", levels: [2, 9, 21, 33], tldr: "Hacking accessibility" },
    { name: "Scrapper", levels: [2, 23], tldr: "Salvage rare components" },
    { name: "Science", levels: [2, 17, 28, 41], tldr: "High-Tech mods" },
    { name: "Chemist", levels: [2, 16, 32, 45], tldr: "Chems last longer" },
    { name: "Robotics Expert", levels: [2, 19, 44], tldr: "Hack robots" },
    {
      name: "Nuclear Physicist",
      levels: [2, 14, 26],
      tldr: "Fusion cores last longer / eject | Radiation weapon damage ",
    },
    {
      name: "Nerd Rage!",
      levels: [2, 31, 50],
      tldr: "Damage resistance | Damage increase at low health",
    },
  ],
  agility: [
    {
      name: "Gunslinger",
      levels: [2, 7, 15, 27, 42],
      tldr: "Non-Automatic pistol damage | Disarm",
    },
    {
      name: "Commando",
      levels: [2, 11, 21, 35, 49],
      tldr: "Automatic weapon damage | Stagger",
    },
    {
      name: "Sneak",
      levels: [2, 5, 12, 23, 38],
      tldr: "Harder to detect when sneaking",
    },
    {
      name: "Mister Sandman",
      levels: [2, 17, 30],
      tldr: "Silenced weapon damage",
    },
    { name: "Action Boy", levels: [2, 18], tldr: "Action Point regeneration" },
    {
      name: "Moving Target",
      levels: [2, 24, 44],
      tldr: "Damage, Energy resistance when sprinting | Less AP to sprint",
    },
    { name: "Ninja", levels: [2, 16, 33], tldr: "Sneak Attack bonuses" },
    {
      name: "Quick Hands",
      levels: [2, 28],
      tldr: "Reload faster and remove AP reload cost",
    },
    { name: "Blitz", levels: [2, 29], tldr: "Melee distance increased" },
    {
      name: "Gun Fu",
      levels: [2, 26, 50],
      tldr: "Increase damage to second target and beyond in V.A.T.S.",
    },
  ],
  luck: [
    { name: "Fortune Finder", levels: [2, 5, 25, 40], tldr: "Find more Caps" },
    { name: "Scrounger", levels: [2, 7, 24, 37], tldr: "Find more Ammo" },
    {
      name: "Bloody Mess",
      levels: [2, 9, 31, 47],
      tldr: "Damage bonus | Enemies explode",
    },
    {
      name: "Mysterious Stranger",
      levels: [2, 22, 41],
      tldr: "Stranger appears in V.A.T.S. ",
    },
    {
      name: "Idiot Savant",
      levels: [2, 11, 34],
      tldr: "XP bonus if you're dumb",
    },
    {
      name: "Better Criticals",
      levels: [2, 15, 40],
      tldr: "More Critical damage",
    },
    {
      name: "Critical Banker",
      levels: [2, 17, 43],
      tldr: "Save Crits in V.A.T.S.",
    },
    {
      name: "Grim Reaper's Sprint",
      levels: [2, 19, 46],
      tldr: "Kills in V.A.T.S. have chance to restore AP",
    },
    {
      name: "Four Leaf Clover",
      levels: [2, 13, 32, 48],
      tldr: "Hits in V.A.T.S. have chance to fill Crit Meter",
    },
    {
      name: "Ricochet",
      levels: [2, 29, 50],
      tldr: "Enemy's shots have chance to be deflected back at shooter",
    },
  ],
};
function findInPerk(array, val0, val1) {
  for (var i = 0; i < array.length; i++) {
    if (array[i].special == val0 && array[i].rank == val1) return i;
  }
  return -1;
}
function displayLevels() {
  var divSwitch = 23;
  if (character.level.length >= 75) {
    $("#levelListb").html(
      "<div class='levelRow'><span class='charLevel'>Level</span><span class='perkName'>Perk</span></div>"
    );
    $("#levelListc").html(
      "<div class='levelRow'><span class='charLevel'>Level</span><span class='perkName'>Perk</span></div>"
    );
    $("#levelListd").html(
      "<div class='levelRow'><span class='charLevel'>Level</span><span class='perkName'>Perk</span></div>"
    );
    $("#levelListb").css("display", "inline-block");
    $("#levelListc").css("display", "inline-block");
    $("#levelListd").css("display", "inline-block");
    divSwitch = Math.ceil(character.level.length / 4);
  } else if (character.level.length >= 50) {
    $("#levelListb").html(
      "<div class='levelRow'><span class='charLevel'>Level</span><span class='perkName'>Perk</span></div>"
    );
    $("#levelListc").html(
      "<div class='levelRow'><span class='charLevel'>Level</span><span class='perkName'>Perk</span></div>"
    );
    $("#levelListb").css("display", "inline-block");
    $("#levelListc").css("display", "inline-block");
    $("#levelListd").css("display", "none");
    divSwitch = Math.ceil(character.level.length / 3);
  } else if (character.level.length >= 25) {
    $("#levelListb").html(
      "<div class='levelRow'><span class='charLevel'>Level</span><span class='perkName'>Perk</span></div>"
    );
    $("#levelListb").css("display", "inline-block");
    $("#levelListc").css("display", "none");
    $("#levelListd").css("display", "none");
    divSwitch = Math.ceil(character.level.length / 2);
  } else {
    $("#levelListb").css("display", "none");
    $("#levelListc").css("display", "none");
    $("#levelListd").css("display", "none");
  }
  $("#levelLista").html(
    "<div class='levelRow'><span class='charLevel'>Level</span><span class='perkName'>Perk</span></div>"
  );
  div = "#levelLista";
  for (var i = 0; i < character.level.length; i++) {
    if (i % divSwitch == 0 && i > 0) {
      if (div == "#levelListc") div = "#levelListd";
      if (div == "#levelListb") div = "#levelListc";
      if (div == "#levelLista") div = "#levelListb";
    }
    if (character.level[i] !== undefined) {
      $(div).html(
        $(div).html() +
          "<div class='levelRow'><span class='charLevel'>" +
          (i + 2) +
          "</span><span class='perkName'>" +
          character.level[i].name +
          "</span></div>"
      );
    } else {
      $(div).html(
        $(div).html() +
          "<div class='levelRow'><span class='charLevel'>" +
          (i + 2) +
          "</span><span class='perkName'>Free</span></div>"
      );
    }
  }
  if (character.level.length <= 0) {
    $(".levelList").css("height", "200px");
  } else {
    $(".levelList").css("height", "auto");
  }
}
function firstUndef(array, start) {
  if (array[start] == undefined) return start;
  for (var i = start; i <= array.length; i++) {
    if (array[i] === undefined) return i;
  }
  return 0;
}
function getPerk(perk, stat) {
  for (var i = 0; i < perk[0].levels.length; i++) {
    character.level[firstUndef(character.level, perk[0].levels[i] + -2)] =
      perk[0];
  }
  perk.splice(findInPerk(perk, perk[0].special, perk[0].rank), 1);
  displayLevels();
}
function getSpecial(spec) {
  switch (spec) {
    case "s":
      character.strength++;
      character.level[firstUndef(character.level, 0)] = {
        special: "strength",
        rank: character.strength,
        name: "Strength",
        levels: [],
        tldr: "Carry Weight",
        priority: "",
      };
      break;
    case "p":
      character.perception++;
      character.level[firstUndef(character.level, 0)] = {
        special: "perception",
        rank: character.strength,
        name: "Perception",
        levels: [],
        tldr: "Perception",
        priority: "",
      };
      break;
    case "e":
      character.endurance++;
      character.level[firstUndef(character.level, 0)] = {
        special: "endurance",
        rank: character.strength,
        name: "Endurance",
        levels: [],
        tldr: "Endurance",
        priority: "",
      };
      break;
    case "c":
      character.charisma++;
      character.level[firstUndef(character.level, 0)] = {
        special: "charisma",
        rank: character.strength,
        name: "Charisma",
        levels: [],
        tldr: "Charisma",
        priority: "",
      };
      break;
    case "i":
      character.intelligence++;
      character.level[firstUndef(character.level, 0)] = {
        special: "intelligence",
        rank: character.strength,
        name: "Intelligence",
        levels: [],
        tldr: "Intelligence",
        priority: "",
      };
      break;
    case "a":
      character.agility++;
      character.level[firstUndef(character.level, 0)] = {
        special: "agility",
        rank: character.strength,
        name: "Agility",
        levels: [],
        tldr: "Agility",
        priority: "",
      };
      break;
    case "l":
      character.luck++;
      character.level[firstUndef(character.level, 0)] = {
        special: "luck",
        rank: character.strength,
        name: "Luck",
        levels: [],
        tldr: "Luck",
        priority: "",
      };
      break;
  }
}
function checkSpecial(spec, rank) {
  var stat;
  switch (spec) {
    case "s":
      stat = character.strength;
      break;
    case "p":
      stat = character.perception;
      break;
    case "e":
      stat = character.endurance;
      break;
    case "c":
      stat = character.charisma;
      break;
    case "i":
      stat = character.intelligence;
      break;
    case "a":
      stat = character.agility;
      break;
    case "l":
      stat = character.luck;
      break;
  }
  if (stat >= rank) {
    return true;
  }
  return false;
}
function calcLevel() {
  var i = 0;
  var perks = character.perkArray.slice(0);
  character.level = [];
  while (perks.length > 0) {
    switch (perks[0].special) {
      case "strength":
        if (checkSpecial("s", perks[0].rank)) {
          getPerk(perks, character.strength);
        } else {
          getSpecial("s");
        }
        break;
      case "perception":
        if (checkSpecial("p", perks[0].rank)) {
          getPerk(perks, character.perception);
        } else {
          getSpecial("p");
        }
        break;
      case "endurance":
        if (checkSpecial("e", perks[0].rank)) {
          getPerk(perks, character.endurance);
        } else {
          getSpecial("e");
        }
        break;
      case "charisma":
        if (checkSpecial("c", perks[0].rank)) {
          getPerk(perks, character.charisma);
        } else {
          getSpecial("c");
        }
        break;
      case "intelligence":
        if (checkSpecial("i", perks[0].rank)) {
          getPerk(perks, character.intelligence);
        } else {
          getSpecial("i");
        }
        break;
      case "agility":
        if (checkSpecial("a", perks[0].rank)) {
          getPerk(perks, character.agility);
        } else {
          getSpecial("a");
        }
        break;
      case "luck":
        if (checkSpecial("l", perks[0].rank)) {
          getPerk(perks, character.luck);
        } else {
          getSpecial("l");
        }
        break;
    }
    i++;
  }
}
function calculate() {
  document.getElementById("progress").innerHTML = "<p>Calculating...</p>";
  $("button").prop("disabled", true);
  setTimeout(function () {
    inputs = $(".priority");
    for (var i = 0; i < inputs.length; i++) {
      character.perkArray[
        findInPerk(
          character.perkArray,
          $(inputs[i]).attr("special"),
          $(inputs[i]).attr("rank")
        )
      ].priority = $(inputs[i]).val();
    }
    sortPerkArray();
    buildSpecials();
    buildPerkList();
    calcLevel();
    $("#progress").html("<p>Done!</p>");
    $("button").prop("disabled", false);
  }, 10);
}
function correctStat(stat, rank) {
  if (character.points - (rank - stat) >= 0) {
    character.points = character.points - (rank - stat);
    stat = rank;
  } else {
    stat += character.points;
    character.points = 0;
  }
  return stat;
}
function calcRanks() {
  character.strength = 1;
  character.perception = 1;
  character.endurance = 1;
  character.charisma = 1;
  character.intelligence = 1;
  character.agility = 1;
  character.luck = 1;
  character.points = 29;
  var i = 0;
  if (character.perkArray.length == 0) return;
  while (character.points > 0 && character.perkArray[i] !== undefined) {
    var special = character.perkArray[i].special;
    var rank = character.perkArray[i].rank;
    switch (special) {
      case "strength":
        if (character.strength < rank) {
          character.strength = correctStat(character.strength, rank);
        }
        break;
      case "perception":
        if (character.perception < rank) {
          character.perception = correctStat(character.perception, rank);
        }
        break;
      case "endurance":
        if (character.endurance < rank) {
          character.endurance = correctStat(character.endurance, rank);
        }
        break;
      case "charisma":
        if (character.charisma < rank) {
          character.charisma = correctStat(character.charisma, rank);
        }
        break;
      case "intelligence":
        if (character.intelligence < rank) {
          character.intelligence = correctStat(character.intelligence, rank);
        }
        break;
      case "agility":
        if (character.agility < rank) {
          character.agility = correctStat(character.agility, rank);
        }
        break;
      case "luck":
        if (character.luck < rank) {
          character.luck = correctStat(character.luck, rank);
        }
        break;
    }
    i++;
  }
}
function buildSpecials() {
  calcRanks();
  $("#char").html(
    "<div class='charRow'><span class='specLevel'>Special</span></div>" +
      "<div class='charRow'><span class='specLevel'>Strength</span><span class='levelBox'>" +
      character.strength +
      "</span><span class='levelBox'>+ " +
      (Number(character.strength) - 1) +
      "</span></div>" +
      "<div class='charRow'><span class='specLevel'>Perception</span><span class='levelBox'>" +
      character.perception +
      "</span><span class='levelBox'>+ " +
      (Number(character.perception) - 1) +
      "</span></div>" +
      "<div class='charRow'><span class='specLevel'>Endurance</span><span class='levelBox'>" +
      character.endurance +
      "</span><span class='levelBox'>+ " +
      (Number(character.endurance) - 1) +
      "</span></div>" +
      "<div class='charRow'><span class='specLevel'>Charisma</span><span class='levelBox'>" +
      character.charisma +
      "</span><span class='levelBox'>+ " +
      (Number(character.charisma) - 1) +
      "</span></div>" +
      "<div class='charRow'><span class='specLevel'>Intelligence</span><span class='levelBox'>" +
      character.intelligence +
      "</span><span class='levelBox'>+ " +
      (Number(character.intelligence) - 1) +
      "</span></div>" +
      "<div class='charRow'><span class='specLevel'>Agility</span><span class='levelBox'>" +
      character.agility +
      "</span><span class='levelBox'>+ " +
      (Number(character.agility) - 1) +
      "</span></div>" +
      "<div class='charRow'><span class='specLevel'>Luck</span><span class='levelBox'>" +
      character.luck +
      "</span><span class='levelBox'>+ " +
      (Number(character.luck) - 1) +
      "</span></div>" +
      "<div class='charRow'><span class='specLevel'>Points Left</span><span class='levelBox'>" +
      character.points +
      "</span><span class='levelBox'>- " +
      (29 - Number(character.points)) +
      "</span></div>"
  );
}
function sortPerkArray() {
  character.perkArray.sort(function (a, b) {
    var sortA = 0;
    var sortB = 0;
    if (a.priority != b.priority) {
      return a.priority - b.priority;
    }
    switch (a.special.substring(0, 1)) {
      case "s":
        sortA = 1;
        break;
      case "p":
        sortA = 2;
        break;
      case "e":
        sortA = 3;
        break;
      case "c":
        sortA = 4;
        break;
      case "i":
        sortA = 5;
        break;
      case "a":
        sortA = 6;
        break;
      case "l":
        sortA = 7;
        break;
    }
    switch (b.special.substring(0, 1)) {
      case "s":
        sortB = 1;
        break;
      case "p":
        sortB = 2;
        break;
      case "e":
        sortB = 3;
        break;
      case "c":
        sortB = 4;
        break;
      case "i":
        sortB = 5;
        break;
      case "a":
        sortB = 6;
        break;
      case "l":
        sortB = 7;
        break;
    }
    if (sortA == sortB) {
      return a.rank - b.rank;
    }
    return sortA - sortB;
  });
}
function getLevels(levels) {
  var temp = "";
  for (i = 0; i < 5; i++) {
    if (levels[i] !== undefined) pl = levels[i];
    else pl = "";
    temp += '<span class="levelBox">' + pl + "</span>";
  }
  return temp;
}
function buildPerkList() {
  sortPerkArray();
  var temp = "";
  $("#perk").html(
    "<div class='perkRow'><span class='levelBox'>Pri</span><span class='specLevel'>Special</span><span class='levelBox'>Req</span><span class='perkName'>Perk</span><span class='perkLevels'>Levels</span><span class='tldr'>Description</span></div>"
  );
  for (var i = 0; i < character.perkArray.length; i++) {
    $("#perk").html(
      $("#perk").html() +
        "<div class='perkRow'><span class='levelBox'><input class='priority' value=" +
        Number(character.perkArray[i].priority) +
        " special='" +
        character.perkArray[i].special +
        "' rank=" +
        character.perkArray[i].rank +
        " /></span><span class='specLevel'>" +
        character.perkArray[i].special +
        "</span><span class='levelBox'>" +
        character.perkArray[i].rank +
        "</span><span class='perkName'>" +
        character.perkArray[i].name +
        "</span><span class='perkLevels'>" +
        getLevels(character.perkArray[i].levels) +
        "</span><span class='tldr'>" +
        character.perkArray[i].tldr +
        "</span></div>"
    );
  }
  if (character.perkArray.length <= 0) {
    $("#perk").css("height", "200px");
  } else if (character.perkArray.length > 10) {
    $("#perk").css("overflow-y", "auto");
    $("#perk").css("overflow-x", "hidden");
  }
}
function click(a) {
  var temp = "";
  var pl = "";
  var i = 0;
  var priority = 1;
  var perkName;
  var perkLevels;
  var perkTldr;
  var p = a.value.split(",");
  switch (p[0]) {
    case "strength":
      perkName = perks.strength[p[1]].name;
      perkLevels = perks.strength[p[1]].levels;
      perkTldr = perks.strength[p[1]].tldr;
      break;
    case "perception":
      perkName = perks.perception[p[1]].name;
      perkLevels = perks.perception[p[1]].levels;
      perkTldr = perks.perception[p[1]].tldr;
      break;
    case "endurance":
      perkName = perks.endurance[p[1]].name;
      perkLevels = perks.endurance[p[1]].levels;
      perkTldr = perks.endurance[p[1]].tldr;
      break;
    case "charisma":
      perkName = perks.charisma[p[1]].name;
      perkLevels = perks.charisma[p[1]].levels;
      perkTldr = perks.charisma[p[1]].tldr;
      break;
    case "intelligence":
      perkName = perks.intelligence[p[1]].name;
      perkLevels = perks.intelligence[p[1]].levels;
      perkTldr = perks.intelligence[p[1]].tldr;
      break;
    case "agility":
      perkName = perks.agility[p[1]].name;
      perkLevels = perks.agility[p[1]].levels;
      perkTldr = perks.agility[p[1]].tldr;
      break;
    case "luck":
      perkName = perks.luck[p[1]].name;
      perkLevels = perks.luck[p[1]].levels;
      perkTldr = perks.luck[p[1]].tldr;
      break;
  }
  rank = 1 + Number(p[1]);
  if (character.perkArray.length > 0) {
    priority =
      Number(character.perkArray[character.perkArray.length - 1].priority) + 1;
  }
  if (a.checked) {
    character.perkArray.splice(character.perkArray.length, 0, {
      special: p[0],
      rank: rank,
      name: perkName,
      levels: perkLevels,
      tldr: perkTldr,
      priority: priority,
    });
  } else {
    character.perkArray.splice(findInPerk(character.perkArray, p[0], rank), 1);
  }
}
function selectAll() {
  character.perkArray = [];
  character.level = [];
  document.getElementById("progress").innerHTML = "<p>Selecting...</p>";
  $("button").prop("disabled", true);
  setTimeout(function () {
    $("input[type='checkbox']").prop("checked", true);
    $("input[type='checkbox']").each(function () {
      click(this);
    });
    buildPerkList();
    buildSpecials();
    displayLevels();
    document.getElementById("progress").innerHTML = "<p>Selected</p>";
    $("button").prop("disabled", false);
  }, 30);
}
function reset() {
  document.getElementById("progress").innerHTML = "<p>Resetting...</p>";
  $("button").prop("disabled", true);
  setTimeout(function () {
    $("input[type='checkbox'] ").prop("checked", false);
    $("input[type='checkbox']").each(function () {
      click(this);
    });
    character.level = [];
    character.perkArray = [];
    buildPerkList();
    buildSpecials();
    displayLevels();
    document.getElementById("progress").innerHTML = "<p>Reset</p>";
    $("button").prop("disabled", false);
  }, 30);
}
$(document).ready(function () {
  var temp = "";
  temp += "<div>";
  temp += "<span class='specialLevel'></span>";
  temp += "<span class='special'>Strength</span>";
  temp += "<span class='special'>Perception</span>";
  temp += "<span class='special'>Endurance</span>";
  temp += "<span class='special'>Charisma</span>";
  temp += "<span class='special'>Intelligence</span>";
  temp += "<span class='special'>Agility</span>";
  temp += "<span class='special'>Luck</span>";
  temp += "</div>";
  for (var i = 0; i < perks.strength.length; i++) {
    temp += "<div>";
    temp += "<span class='specialLevel'>" + (i + 1) + "</span>";
    temp +=
      "<span class='perk'><input type='checkbox' value='strength," +
      i +
      "' />" +
      perks.strength[i].name +
      "</span>";
    temp +=
      "<span class='perk'><input type='checkbox' value='perception," +
      i +
      "' />" +
      perks.perception[i].name +
      "</span>";
    temp +=
      "<span class='perk'><input type='checkbox' value='endurance," +
      i +
      "' />" +
      perks.endurance[i].name +
      "</span>";
    temp +=
      "<span class='perk'><input type='checkbox' value='charisma," +
      i +
      "' />" +
      perks.charisma[i].name +
      "</span>";
    temp +=
      "<span class='perk'><input type='checkbox' value='intelligence," +
      i +
      "' />" +
      perks.intelligence[i].name +
      "</span>";
    temp +=
      "<span class='perk'><input type='checkbox' value='agility," +
      i +
      "' />" +
      perks.agility[i].name +
      "</span>";
    temp +=
      "<span class='perk'><input type='checkbox' value='luck," +
      i +
      "' />" +
      perks.luck[i].name +
      "</span>";
    temp += "</div>";
  }
  $("#perkSelect").html(temp);
  $("input[type='checkbox']").change(function () {
    click(this);
    buildPerkList();
  });
  $("input[type='checkbox']").click(function (event) {
    event.stopPropagation();
  });
  $("#perkSelect > div:not(:first-child) > span").click(function (event) {
    $(this).children("input[type='checkbox']").click();
  });
  buildPerkList();
  buildSpecials();
  displayLevels();
});
